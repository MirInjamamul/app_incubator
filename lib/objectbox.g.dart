// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'core/data/entity/location_entity.dart';
import 'core/data/entity/vehicle_entity.dart';
import 'ui/view/profile/data/model/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 4193728243903287042),
      name: 'LocationEntity',
      lastPropertyId: const obx_int.IdUid(3, 5818609564523181390),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3568440965361708846),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7192144969235962860),
            name: 'lat',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5818609564523181390),
            name: 'lng',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2318271056688616494),
      name: 'UserEntity',
      lastPropertyId: const obx_int.IdUid(7, 8295091285297764835),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2603953679261170805),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8765094351180883368),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 16829177113712023),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6767054336232959750),
            name: 'token',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2690599783730965730),
            name: 'message',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4319421481161209450),
            name: 'userId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8295091285297764835),
            name: 'totalTrip',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 8689741051487968831),
      name: 'VehicleEntity',
      lastPropertyId: const obx_int.IdUid(10, 8244879665251994651),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2965949371080145387),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2843328831411072522),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 933483399566953213),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3109181259507983098),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 323714660043034785),
            name: 'image',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3999376274577275248),
            name: 'battery',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4009858372093312908),
            name: 'costPerMinute',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6721479189558152707),
            name: 'createAt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5435219277496069848),
            name: 'vehicleId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8244879665251994651),
            name: 'locationId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 3972578444171701262),
            relationTarget: 'LocationEntity')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) {
  return obx.Store(getObjectBoxModel(),
      directory: directory,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 8689741051487968831),
      lastIndexId: const obx_int.IdUid(1, 3972578444171701262),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    LocationEntity: obx_int.EntityDefinition<LocationEntity>(
        model: _entities[0],
        toOneRelations: (LocationEntity object) => [],
        toManyRelations: (LocationEntity object) => {},
        getId: (LocationEntity object) => object.id,
        setId: (LocationEntity object, int id) {
          object.id = id;
        },
        objectToFB: (LocationEntity object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.lat);
          fbb.addFloat64(2, object.lng);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final latParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final lngParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = LocationEntity(lat: latParam, lng: lngParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    UserEntity: obx_int.EntityDefinition<UserEntity>(
        model: _entities[1],
        toOneRelations: (UserEntity object) => [],
        toManyRelations: (UserEntity object) => {},
        getId: (UserEntity object) => object.id,
        setId: (UserEntity object, int id) {
          object.id = id;
        },
        objectToFB: (UserEntity object, fb.Builder fbb) {
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          final tokenOffset = fbb.writeString(object.token);
          final messageOffset = fbb.writeString(object.message);
          final userIdOffset = fbb.writeString(object.userId);
          final totalTripOffset = fbb.writeString(object.totalTrip);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, emailOffset);
          fbb.addOffset(2, passwordOffset);
          fbb.addOffset(3, tokenOffset);
          fbb.addOffset(4, messageOffset);
          fbb.addOffset(5, userIdOffset);
          fbb.addOffset(6, totalTripOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final tokenParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final totalTripParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = UserEntity(
              id: idParam,
              email: emailParam,
              password: passwordParam,
              token: tokenParam,
              message: messageParam,
              userId: userIdParam,
              totalTrip: totalTripParam);

          return object;
        }),
    VehicleEntity: obx_int.EntityDefinition<VehicleEntity>(
        model: _entities[2],
        toOneRelations: (VehicleEntity object) => [object.location],
        toManyRelations: (VehicleEntity object) => {},
        getId: (VehicleEntity object) => object.id,
        setId: (VehicleEntity object, int id) {
          object.id = id;
        },
        objectToFB: (VehicleEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final createAtOffset = object.createAt == null
              ? null
              : fbb.writeString(object.createAt!);
          final vehicleIdOffset = object.vehicleId == null
              ? null
              : fbb.writeString(object.vehicleId!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, statusOffset);
          fbb.addOffset(4, imageOffset);
          fbb.addInt64(5, object.battery);
          fbb.addInt64(6, object.costPerMinute);
          fbb.addOffset(7, createAtOffset);
          fbb.addOffset(8, vehicleIdOffset);
          fbb.addInt64(9, object.location.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final batteryParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final costPerMinuteParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final createAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final vehicleIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = VehicleEntity(
              id: idParam,
              name: nameParam,
              type: typeParam,
              status: statusParam,
              image: imageParam,
              battery: batteryParam,
              costPerMinute: costPerMinuteParam,
              createAt: createAtParam,
              vehicleId: vehicleIdParam);
          object.location.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.location.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [LocationEntity] entity fields to define ObjectBox queries.
class LocationEntity_ {
  /// See [LocationEntity.id].
  static final id =
      obx.QueryIntegerProperty<LocationEntity>(_entities[0].properties[0]);

  /// See [LocationEntity.lat].
  static final lat =
      obx.QueryDoubleProperty<LocationEntity>(_entities[0].properties[1]);

  /// See [LocationEntity.lng].
  static final lng =
      obx.QueryDoubleProperty<LocationEntity>(_entities[0].properties[2]);
}

/// [UserEntity] entity fields to define ObjectBox queries.
class UserEntity_ {
  /// See [UserEntity.id].
  static final id =
      obx.QueryIntegerProperty<UserEntity>(_entities[1].properties[0]);

  /// See [UserEntity.email].
  static final email =
      obx.QueryStringProperty<UserEntity>(_entities[1].properties[1]);

  /// See [UserEntity.password].
  static final password =
      obx.QueryStringProperty<UserEntity>(_entities[1].properties[2]);

  /// See [UserEntity.token].
  static final token =
      obx.QueryStringProperty<UserEntity>(_entities[1].properties[3]);

  /// See [UserEntity.message].
  static final message =
      obx.QueryStringProperty<UserEntity>(_entities[1].properties[4]);

  /// See [UserEntity.userId].
  static final userId =
      obx.QueryStringProperty<UserEntity>(_entities[1].properties[5]);

  /// See [UserEntity.totalTrip].
  static final totalTrip =
      obx.QueryStringProperty<UserEntity>(_entities[1].properties[6]);
}

/// [VehicleEntity] entity fields to define ObjectBox queries.
class VehicleEntity_ {
  /// See [VehicleEntity.id].
  static final id =
      obx.QueryIntegerProperty<VehicleEntity>(_entities[2].properties[0]);

  /// See [VehicleEntity.name].
  static final name =
      obx.QueryStringProperty<VehicleEntity>(_entities[2].properties[1]);

  /// See [VehicleEntity.type].
  static final type =
      obx.QueryStringProperty<VehicleEntity>(_entities[2].properties[2]);

  /// See [VehicleEntity.status].
  static final status =
      obx.QueryStringProperty<VehicleEntity>(_entities[2].properties[3]);

  /// See [VehicleEntity.image].
  static final image =
      obx.QueryStringProperty<VehicleEntity>(_entities[2].properties[4]);

  /// See [VehicleEntity.battery].
  static final battery =
      obx.QueryIntegerProperty<VehicleEntity>(_entities[2].properties[5]);

  /// See [VehicleEntity.costPerMinute].
  static final costPerMinute =
      obx.QueryIntegerProperty<VehicleEntity>(_entities[2].properties[6]);

  /// See [VehicleEntity.createAt].
  static final createAt =
      obx.QueryStringProperty<VehicleEntity>(_entities[2].properties[7]);

  /// See [VehicleEntity.vehicleId].
  static final vehicleId =
      obx.QueryStringProperty<VehicleEntity>(_entities[2].properties[8]);

  /// See [VehicleEntity.location].
  static final location = obx.QueryRelationToOne<VehicleEntity, LocationEntity>(
      _entities[2].properties[9]);
}
